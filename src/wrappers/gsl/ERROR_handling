
Error handling in the GSL wrapper

There are two types of errors:

1. ieee exceptions
They occur if the fpu triggers an exception during an operation. Typical
examples are over/underflow and division by zero.

2. gsl errors:
An error that occurs during the computation in the gsl. In general these
are if a gsl function doesn't return success. Typical examples are:
A function is applied to invalid arguments (adding two matrices of differerent
sizes), memory exhausted, or an algorithm doesn't converge with given
parameters.


IEEE exceptions
If you are interested in IEEE exceptions, use a GSL_ERROR_HANDLER object,
to reset them before the calcualtion you want to observer by calling
"reset_ieee_exceptions". Do the computation and find out whether an ieee
exception occured with has_ieee_exception. has_ieee_XX features more detailed
information about the type can be obtained.

example:
h: GSL_ERROR_HANDLER
a: GSL_MATRIX_REAL_64

h.reset_ieee_exceptions
create a.from_collection2 ( {ARRAY2[REAL_64] 0,1, 0,1,
                                             << 1.0, 2.0;
                                                2.0, 9.0e307>>})
a.add(a)
check
        h.has_ieee_overflow
end


handling of gsl errors:

GSL uses a posix-style, thread-safe error handling returning non-zero if a
gsl function failed. The return value is passed into featured handle_code
of class GSL_ERRNO which should be inserted into every class calling gsl
functions.

A simplified version of GSL_MATRIX could like:

class GSL_MATRIX

insert GSL_ERRNO

   add(other: GSL_MATRIX) is
      do
         handle_code(gsl_matrix_add(handle, other.handle)
      end

feature {GSL_MATRIX}
   handle: POINTER
      -- pointer to the external matrix struct...

feature {} -- external functions
   gsl_matrix_add (a_gsl_matrix, another_gsl_matrix: POINTER): INTEGER_32 is
      require
         a_gsl_matrix.is_not_null
         another_gsl_matrix.is_not_null
      external "plug_in"
      alias "{
         location: "${eiffel_libraries}/plugins"
         module_name: "eiffel-gsl"
         feature_name: "gsl_matrix_float_add"
         }"
      end

end


Error handling in the user code could be done in several ways:
1. Do not handle it:
Call GSL_ERROR_HANDLER.set_on to enable the default gsl error handler. Then any
gsl error will lead to an error message on stdout and a crash of the
application.

2. Use exceptions
Call set_raise_on_error on the matrix or vector object of interest.
Each gsl error will lead to a DeveloperException wich may be cought by default
eiffel exception handling (rescue clause)

3. querying the modified object
After calling a command on a wrapped GSL object (e. g. a GSL_MATRIX_REAL_64) the
query has_error returns true if an error occured. With err_explanation an
error message can be obtained. The error state of an object will only be cleared
if err_clear is called. This can be used to do a number of calculations with an
object and after that an error in the whole computation may be handled.


