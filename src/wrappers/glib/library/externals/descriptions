-- This is  free  software;  you can  redistribute it and/or modify it 
-- under the terms of the GNU General Public License as published by the Free
-- Software  Foundation;  either  version  2, or (at your option)  any  later 
-- version. SmartEiffel is distributed in the hope that it will be useful,but
-- WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
-- or  FITNESS FOR A PARTICULAR PURPOSE.   See the GNU General Public License 
-- for  more  details.  You  should  have  received a copy of the GNU General 
-- Public  License  along  with  SmartEiffel;  see the file COPYING.  If not,
-- write to the  Free Software Foundation, Inc., 51 Franklin St, Fifth Floor,
-- Boston, MA  02110-1301, USA

-- Dummy comments to check some implementation details of eiffel-gcc-xml
G_CHECKSUM_TYPE Types of checksums
G_CHECKSUM_TYPE.is_g_checksum_md5 The usual MD5 algorithm

GSEQUENCE_EXTERNALS   A sequence in GLib library
GSEQUENCE_EXTERNALS.g_sequence_prepend predend to a sequence

G_TEST_LOG_MSG_STRUCT	A private structure 
G_TEST_LOG_MSG_STRUCT.n_strings Private field setter of glib testing.
-- G_TEST_LOG_MSG_STRUCT.gtestlogmsg_get_n_strings Private field getter of glib testing.

-- Actual descriptions

-- G_OPTION_ARG
G_OPTION_ARG The GOptionArg enum values determine which type of extra  argument the options expect to find. If an option expects an  extra argument, it can be specified in several ways; with a  short option: -x arg, with a long option name arg or combined  in a single argument: --name=arg.
G_OPTION_ARG.set_none No extra argument. This is useful for simple flags.
G_OPTION_ARG.set_string The option takes a string argument.
G_OPTION_ARG.set_integer The option takes an integer argument.
G_OPTION_ARG.set_callback The option provides a callback to parse the extra argument.
G_OPTION_ARG.set_filename The option takes a filename as argument.
G_OPTION_ARG.set_string_array the option takes a string argument, multiple uses of the option are collected into an array of strings.
G_OPTION_ARG.set_filename_array The option takes a filename as argument, multiple uses of the option are collected into an array of strings.
G_OPTION_ARG.set_real The option takes a REAL double argument. The argument can be formatted either for the user's locale or for the "C" locale. Since 2.12
G_OPTION_ARG.set_integer_64 The option takes a 64-bit integer. Like G_OPTION_ARG_INT but for larger numbers. The number can be in decimal base, or in hexadecimal (when prefixed with 0x, for example, 0xffffffff). Since 2.12

-- G_OPTION_FLAGS
G_OPTION_FLAGS Flags which modify individual options in G_OPTION_GROUP

G_OPTION_FLAGS.hidden The option doesn't appear in --help output.
G_OPTION_FLAGS.in_main The option appears in the main section of the --help output, even if it is defined in a group.
G_OPTION_FLAGS.reverse For options of the G_OPTION_ARG_NONE kind, this flag indicates that the sense of the option is reversed.
G_OPTION_FLAGS.no_arg For options of the G_OPTION_ARG_CALLBACK kind, this flag indicates that the callback does not take any argument (like a G_OPTION_ARG_NONE option). Since 2.8
G_OPTION_FLAGS.filename For options of the G_OPTION_ARG_CALLBACK kind, this flag indicates that the argument should be passed to the callback in the GLib filename encoding rather than UTF-8. Since 2.8
G_OPTION_FLAGS.optional_arg For options of the G_OPTION_ARG_CALLBACK kind, this flag indicates that the argument supply is optional.  If no argument is given then data of GOptionParseFunc will be set to NULL. Since 2.8
G_OPTION_FLAGS.noalias This flag turns off the automatic conflict resolution which prefixes long option names with groupname- if there is a conflict. This option should only be used in situations where aliasing is necessary to model some legacy commandline interface. It is not safe to use this option, unless all option groups are under your direct control. Since 2.8.

G_NORMALIZE_MODE	Defines how a Unicode string is transformed in a canonical form, standardizing such issues as whether a character with an accent is represented as a base character and combining accent or as a single precomposed character. Unicode strings should generally be normalized before comparing them.
G_NORMALIZE_MODE.default Standardize differences that do not affect the text content, such as the above-mentioned accent representation.
G_NORMALIZE_MODE.nfd Another name for G_NORMALIZE_DEFAULT.
G_NORMALIZE_MODE.default_compose Like default, but with composed forms rather than a maximally decomposed form.
G_NORMALIZE_MODE.nfc Another name for default_compose.
G_NORMALIZE_MODE.all Beyond dafault also standardize the "compatibility" characters in Unicode, such as SUPERSCRIPT THREE to the standard forms (in this case DIGIT THREE). Formatting information may be lost but for most text operations such characters should be considered the same.
G_NORMALIZE_MODE.nfkd Another name for "all".
G_NORMALIZE_MODE.all_compose Like "all", but with composed forms rather than a maximally decomposed form.
G_NORMALIZE_MODE.nfkc Another name for "all_compose".


